/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum NSkiaPathFillType {
  Winding = 0,
  EvenOdd = 1,
  InverseWinding = 2,
  InverseEvenOdd = 3
}
export function sum(a: number, b: number): number
export class NSkiaPath {
  /** Constructs an empty Path by default, path has no versbs, no Point and no weights */
  constructor()
  isInterpolatable(other: NSkiaPath): boolean
  fillType(): NSkiaPathFillType
  setFillType(ft: NSkiaPathFillType): void
  isConvex(): boolean
  isFinite(): boolean
  moveTo(x: number, y: number): void
  lineTo(x: number, y: number): void
  quadTo(cpx: number, cpy: number, x: number, y: number): void
  cubicTo(cp1X: number, cp1Y: number, cp2X: number, cp2Y: number, x: number, y: number): void
  closePath(): void
}
export class NSkiaSurfaces {
  constructor(width: number, height: number)
  static newNull(width: number, height: number): NSkiaSurfaces
  cSave(): number
  cClear(color: number): void
  saveTo(file: string): void
  imWidth(): number
  imHeight(): number
  cTranslate(x: number, y: number): void
  cRotate(degrees: number, pointX?: number | undefined | null, pointY?: number | undefined | null): void
}
export class SkiaCanvas {
  constructor(width: number, height: number)
  save(): void
  translate(dx: number, dy: number): void
  scale(sx: number, sy: number): void
  moveTo(x: number, y: number): void
  lineTo(x: number, y: number): void
  quadTo(cpx: number, cpy: number, x: number, y: number): void
  bezierCurveTo(cp1X: number, cp1Y: number, cp2X: number, cp2Y: number, x: number, y: number): void
  closePath(): void
  beginPath(): void
  stroke(): void
  fill(): void
  setLineWidth(width: number): void
  saveTo(file: string): void
}
